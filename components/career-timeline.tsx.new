"use client";

import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Calendar,
  MapPin,
  Building,
  Trophy,
  Code,
  Users,
  Rocket,
  Star,
  ChevronDown,
  ChevronUp,
  ExternalLink,
  Award,
  Target,
  Zap,
  Shield,
} from "lucide-react";

type CareerType = "work" | "education" | "project" | "achievement";

interface Achievement {
  title: string;
  description: string;
  icon: any;
  color: string;
}

interface CareerItem {
  id: string;
  title: string;
  company: string;
  location: string;
  period: string;
  type: CareerType;
  description: string;
  responsibilities?: string[];
  achievements?: Achievement[];
  technologies?: string[];
  highlights?: string[];
  link?: string;
  color: string;
  gradient: string;
}

const timelineData: CareerItem[] = [
  {
    id: "work-progt",
    title: "Assistente de T.I",
    company: "PROGT LTDA.",
    location: "",
    period: "2021 - Presente",
    type: "work",
    description:
      "Profissional com experi√™ncia superior a dois anos no campo da Tecnologia da Informa√ß√£o, trabalhando como Assistente de TI na PROGT Industrial. Com forma√ß√£o t√©cnica em TI e atualiza√ß√£o cont√≠nua, detenho conhecimentos robustos em assist√™ncia ao usu√°rio, administra√ß√£o de infraestrutura de TI e envolvimento em projetos de software.",
    responsibilities: [
      "Assist√™ncia ao usu√°rio e suporte t√©cnico",
      "Administra√ß√£o de infraestrutura de TI",
      "Administra√ß√£o de backups",
      "Monitoramento de redes",
      "Apoio √† aplica√ß√£o de padr√µes de qualidade (ISO 9001)",
      "Solu√ß√£o de problemas e aprimoramento de processos",
      "Apoio em projetos de software",
      "Comunica√ß√£o e colabora√ß√£o com equipes",
      "Gerenciamento de projetos de TI",
    ],
    achievements: [
      {
        title: "Aprimoramento de Processos",
        description:
          "Contribui√ß√£o para a evolu√ß√£o dos procedimentos e efic√°cia operacional.",
        icon: Rocket,
        color: "text-green-600",
      },
      {
        title: "Apoio √† Qualidade",
        description: "Participa√ß√£o na aplica√ß√£o de padr√µes como a ISO 9001.",
        icon: Shield,
        color: "text-blue-600",
      },
    ],
    technologies: [
      "Assist√™ncia T√©cnica",
      "Administra√ß√£o de Backups",
      "Monitoramento de Redes",
      "ISO 9001",
      "Comunica√ß√£o",
      "Gerenciamento de Projetos",
    ],
    highlights: [
      "Foco em solu√ß√£o de problemas",
      "Aprimoramento de processos",
      "Desenvolvimento coletivo",
    ],
    color: "border-emerald-500",
    gradient: "from-emerald-400 to-teal-500",
  },
  {
    id: "educacao-1",
    title: "An√°lise e Desenvolvimento de Sistemas",
    company: "Cruzeiro do Sul",
    location: "",
    period: "2022 - 2025",
    type: "education",
    description: "Curso superior conclu√≠do em 2025.",
    achievements: [],
    technologies: [],
    highlights: [],
    color: "border-blue-500",
    gradient: "from-blue-400 to-cyan-500",
  },
  {
    id: "educacao-2",
    title: "Python Impressionador",
    company: "HashTag",
    location: "",
    period: "2023",
    type: "education",
    description: "Conclu√≠do",
    achievements: [],
    technologies: [],
    highlights: [],
    color: "border-green-500",
    gradient: "from-green-400 to-emerald-500",
  },
  {
    id: "educacao-3",
    title: "HTML & CSS",
    company: "HashTag",
    location: "",
    period: "2023",
    type: "education",
    description: "Conclu√≠do",
    achievements: [],
    technologies: [],
    highlights: [],
    color: "border-green-500",
    gradient: "from-green-400 to-emerald-500",
  },
  {
    id: "educacao-4",
    title: "VBA",
    company: "HashTag",
    location: "",
    period: "2023",
    type: "education",
    description: "Conclu√≠do",
    achievements: [],
    technologies: [],
    highlights: [],
    color: "border-green-500",
    gradient: "from-green-400 to-emerald-500",
  },
  {
    id: "educacao-5",
    title: "Intelig√™ncia Artificial",
    company: "HashTag",
    location: "",
    period: "2023",
    type: "education",
    description: "Conclu√≠do",
    achievements: [],
    technologies: [],
    highlights: [],
    color: "border-green-500",
    gradient: "from-green-400 to-emerald-500",
  },
  {
    id: "educacao-6",
    title: "JavaScript",
    company: "HashTag",
    location: "",
    period: "2024",
    type: "education",
    description: "Conclu√≠do",
    achievements: [],
    technologies: [],
    highlights: [],
    color: "border-green-500",
    gradient: "from-green-400 to-emerald-500",
  },
  {
    id: "educacao-7",
    title: "SQL",
    company: "HashTag",
    location: "",
    period: "2024",
    type: "education",
    description: "Conclu√≠do",
    achievements: [],
    technologies: [],
    highlights: [],
    color: "border-green-500",
    gradient: "from-green-400 to-emerald-500",
  },
  {
    id: "educacao-8",
    title: "Design Gr√°fico com Corel Draw",
    company: "Udemy",
    location: "",
    period: "2022",
    type: "education",
    description: "Conclu√≠do",
    achievements: [],
    technologies: [],
    highlights: [],
    color: "border-yellow-500",
    gradient: "from-yellow-400 to-orange-500",
  },
  {
    id: "educacao-9",
    title: "Leitura e Interpreta√ß√£o de Desenho Mec√¢nico",
    company: "Udemy",
    location: "",
    period: "2022",
    type: "education",
    description: "Conclu√≠do",
    achievements: [],
    technologies: [],
    highlights: [],
    color: "border-yellow-500",
    gradient: "from-yellow-400 to-orange-500",
  },
  {
    id: "educacao-10",
    title: "Big Data Fundamentos",
    company: "Data Science Academy",
    location: "",
    period: "2022",
    type: "education",
    description: "Conclu√≠do",
    achievements: [],
    technologies: [],
    highlights: [],
    color: "border-cyan-500",
    gradient: "from-cyan-400 to-blue-500",
  },
  {
    id: "educacao-11",
    title: "Introdu√ß√£o a Ci√™ncia de Dados",
    company: "Data Science Academy",
    location: "",
    period: "2022",
    type: "education",
    description: "Conclu√≠do",
    achievements: [],
    technologies: [],
    highlights: [],
    color: "border-cyan-500",
    gradient: "from-cyan-400 to-blue-500",
  },
  {
    id: "educacao-12",
    title: "Introdu√ß√£o UI UX",
    company: "DIO",
    location: "",
    period: "2023",
    type: "education",
    description: "Conclu√≠do",
    achievements: [],
    technologies: [],
    highlights: [],
    color: "border-pink-500",
    gradient: "from-pink-400 to-rose-500",
  },
  {
    id: "educacao-13",
    title: "Ingl√™s Avan√ßado (Fluente)",
    company: "CNA",
    location: "",
    period: "2024",
    type: "education",
    description: "Conclu√≠do",
    achievements: [],
    technologies: [],
    highlights: [],
    color: "border-indigo-500",
    gradient: "from-indigo-400 to-blue-500",
  },
];

export function CareerTimeline() {
  const [expandedItems, setExpandedItems] = useState<string[]>(["current"]);
  const [filter, setFilter] = useState<CareerType | "all">("all");

  const toggleExpanded = (id: string) => {
    setExpandedItems((prev) =>
      prev.includes(id) ? prev.filter((item) => item !== id) : [...prev, id]
    );
  };

  const filteredData = timelineData.filter(
    (item) => filter === "all" || item.type === filter
  );

  const getTypeIcon = (type: CareerType) => {
    switch (type) {
      case "work":
        return Building;
      case "education":
        return Award;
      case "project":
        return Code;
      case "achievement":
        return Trophy;
      default:
        return Building;
    }
  };

  const getTypeColor = (type: CareerType) => {
    switch (type) {
      case "work":
        return "bg-emerald-500";
      case "education":
        return "bg-blue-500";
      case "project":
        return "bg-purple-500";
      case "achievement":
        return "bg-orange-500";
      default:
        return "bg-gray-500";
    }
  };

  return (
    <div className="w-full max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      {/* Header */}
      <div className="text-center mb-12">
        <h2 className="text-4xl font-bold mb-4 bg-gradient-to-r from-emerald-600 to-teal-600 dark:from-emerald-400 dark:to-teal-400 bg-clip-text text-transparent">
          üöÄ Jornada Profissional
        </h2>
        <p className="text-lg text-slate-600 dark:text-slate-300 mb-8">
          Uma linha do tempo interativa da minha evolu√ß√£o profissional
        </p>

        {/* Filtros */}
        <div className="flex flex-wrap justify-center gap-2 mb-8">
          {[
            { key: "all", label: "Todos", icon: Star },
            { key: "work", label: "Trabalho", icon: Building },
            { key: "education", label: "Educa√ß√£o", icon: Award },
            { key: "project", label: "Projetos", icon: Code },
          ].map(({ key, label, icon: Icon }) => (
            <Button
              key={key}
              variant={filter === key ? "default" : "outline"}
              size="sm"
              onClick={() => setFilter(key as any)}
              className={`${
                filter === key
                  ? "bg-gradient-to-r from-emerald-500 to-teal-500 text-white"
                  : "border-emerald-300 dark:border-emerald-600 text-emerald-700 dark:text-emerald-300 hover:bg-emerald-50 dark:hover:bg-emerald-900/20"
              } transition-all duration-300`}
            >
              <Icon className="h-4 w-4 mr-2" />
              {label}
            </Button>
          ))}
        </div>
      </div>

      {/* Timeline */}
      <div className="relative w-full">
        {/* Container para garantir que os cards n√£o escapem */}
        <div className="relative mx-auto max-w-7xl">
          {/* Linha central */}
          <div className="absolute left-8 md:left-1/2 transform md:-translate-x-1/2 w-1 bg-gradient-to-b from-emerald-400 via-teal-400 to-cyan-400 dark:from-emerald-500 dark:via-teal-500 dark:to-cyan-500 h-full rounded-full shadow-lg" />

          <AnimatePresence>
            {filteredData.map((item, index) => {
              const isExpanded = expandedItems.includes(item.id);
              const TypeIcon = getTypeIcon(item.type);
              const isLeft = index % 2 === 0;

              return (
                <motion.div
                  key={item.id}
                  initial={{ opacity: 0, y: 50 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -50 }}
                  transition={{ duration: 0.5, delay: index * 0.1 }}
                  className={`relative flex items-center mb-12 w-full ${
                    isLeft ? "md:flex-row" : "md:flex-row-reverse"
                  } flex-col md:flex-row`}
                >
                  {/* √çcone central */}
                  <div className="absolute left-8 md:left-1/2 transform md:-translate-x-1/2 -translate-y-1/2 top-1/2 z-10">
                    <div
                      className={`w-16 h-16 ${getTypeColor(
                        item.type
                      )} rounded-full flex items-center justify-center shadow-lg border-4 border-white dark:border-slate-900`}
                    >
                      <TypeIcon className="h-8 w-8 text-white" />
                    </div>
                  </div>

                  {/* Card */}
                  <div
                    className={`w-full md:w-[45%] ${
                      isLeft ? "md:mr-auto md:pr-8" : "md:ml-auto md:pl-8"
                    } ml-20 md:ml-0`}
                  >
                    <Card
                      className={`bg-white/95 dark:bg-slate-800/95 backdrop-blur-sm border-2 ${item.color} hover:shadow-2xl dark:hover:shadow-2xl transition-all duration-300 overflow-hidden`}
                    >
                      {/* Header do Card */}
                      <div className={`h-2 bg-gradient-to-r ${item.gradient}`} />

                      <CardHeader className="pb-4">
                        <div className="flex justify-between items-start mb-2">
                          <Badge
                            variant="outline"
                            className={`${item.color.replace(
                              "border",
                              "text"
                            )} ${item.color} bg-transparent`}
                          >
                            {item.period}
                          </Badge>
                          {item.link && (
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => window.open(item.link, "_blank")}
                              className="p-1 h-auto"
                            >
                              <ExternalLink className="h-4 w-4" />
                            </Button>
                          )}
                        </div>

                        <CardTitle className="text-slate-800 dark:text-slate-100 text-xl font-bold mb-2">
                          {item.title}
                        </CardTitle>

                        <div className="flex items-center gap-2 text-slate-600 dark:text-slate-300 mb-2">
                          <Building className="h-4 w-4" />
                          <span className="font-medium">{item.company}</span>
                        </div>

                        {item.location && (
                          <div className="flex items-center gap-2 text-slate-500 dark:text-slate-400 mb-4">
                            <MapPin className="h-4 w-4" />
                            <span>{item.location}</span>
                          </div>
                        )}

                        <CardDescription className="text-slate-600 dark:text-slate-300 leading-relaxed">
                          {item.description}
                        </CardDescription>
                      </CardHeader>

                      <CardContent className="pt-0">
                        {/* Tecnologias */}
                        {item.technologies && item.technologies.length > 0 && (
                          <div className="mb-4">
                            <div className="flex flex-wrap gap-2">
                              {item.technologies.map((tech) => (
                                <Badge
                                  key={tech}
                                  className="bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-600 text-slate-700 dark:text-slate-300 border-slate-300 dark:border-slate-600"
                                >
                                  {tech}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}

                        {/* Bot√£o Expandir */}
                        {(item.responsibilities?.length > 0 ||
                          item.achievements?.length > 0 ||
                          item.highlights?.length > 0) && (
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => toggleExpanded(item.id)}
                            className="w-full justify-center text-slate-600 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700"
                          >
                            {isExpanded ? (
                              <>
                                <ChevronUp className="h-4 w-4 mr-2" />
                                Ver Menos
                              </>
                            ) : (
                              <>
                                <ChevronDown className="h-4 w-4 mr-2" />
                                Ver Detalhes
                              </>
                            )}
                          </Button>
                        )}

                        {/* Conte√∫do Expandido */}
                        <AnimatePresence>
                          {isExpanded && (
                            <motion.div
                              initial={{ opacity: 0, height: 0 }}
                              animate={{ opacity: 1, height: "auto" }}
                              exit={{ opacity: 0, height: 0 }}
                              transition={{ duration: 0.3 }}
                              className="mt-4 space-y-4"
                            >
                              {/* Responsabilidades */}
                              {item.responsibilities &&
                                item.responsibilities.length > 0 && (
                                  <div>
                                    <h4 className="font-semibold text-slate-800 dark:text-slate-100 mb-2 flex items-center gap-2">
                                      <Target className="h-4 w-4" />
                                      Responsabilidades
                                    </h4>
                                    <ul className="space-y-1 text-slate-600 dark:text-slate-300">
                                      {item.responsibilities.map((resp, idx) => (
                                        <li
                                          key={idx}
                                          className="flex items-start gap-2"
                                        >
                                          <span className="text-emerald-500 mt-1">
                                            ‚Ä¢
                                          </span>
                                          <span className="text-sm">{resp}</span>
                                        </li>
                                      ))}
                                    </ul>
                                  </div>
                                )}

                              {/* Conquistas */}
                              {item.achievements && item.achievements.length > 0 && (
                                <div>
                                  <h4 className="font-semibold text-slate-800 dark:text-slate-100 mb-3 flex items-center gap-2">
                                    <Trophy className="h-4 w-4" />
                                    Principais Conquistas
                                  </h4>
                                  <div className="space-y-3">
                                    {item.achievements.map((achievement, idx) => (
                                      <div
                                        key={idx}
                                        className="flex items-start gap-3 p-3 bg-slate-50 dark:bg-slate-700/50 rounded-lg"
                                      >
                                        <div
                                          className={`${achievement.color} mt-0.5`}
                                        >
                                          <achievement.icon className="h-5 w-5" />
                                        </div>
                                        <div>
                                          <h5 className="font-medium text-slate-800 dark:text-slate-100">
                                            {achievement.title}
                                          </h5>
                                          <p className="text-sm text-slate-600 dark:text-slate-300">
                                            {achievement.description}
                                          </p>
                                        </div>
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              )}

                              {/* Highlights */}
                              {item.highlights && item.highlights.length > 0 && (
                                <div>
                                  <h4 className="font-semibold text-slate-800 dark:text-slate-100 mb-2 flex items-center gap-2">
                                    <Star className="h-4 w-4" />
                                    Destaques
                                  </h4>
                                  <div className="flex flex-wrap gap-2">
                                    {item.highlights.map((highlight, idx) => (
                                      <Badge
                                        key={idx}
                                        className={`bg-gradient-to-r ${item.gradient} text-white border-0`}
                                      >
                                        {highlight}
                                      </Badge>
                                    ))}
                                  </div>
                                </div>
                              )}
                            </motion.div>
                          )}
                        </AnimatePresence>
                      </CardContent>
                    </Card>
                  </div>
                </motion.div>
              );
            })}
          </AnimatePresence>
        </div>
      </div>

      {/* Estat√≠sticas */}
      <motion.div
        initial={{ opacity: 0, y: 30 }}
        whileInView={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="mt-16 grid grid-cols-2 md:grid-cols-4 gap-6"
      >
        {[
          {
            label: "Anos de Experi√™ncia",
            value: "4+",
            icon: Calendar,
            color: "text-emerald-600",
          },
          {
            label: "Projetos Entregues",
            value: "50+",
            icon: Code,
            color: "text-blue-600",
          },
          {
            label: "Tecnologias",
            value: "15+",
            icon: Zap,
            color: "text-purple-600",
          },
          {
            label: "Equipes Lideradas",
            value: "3",
            icon: Users,
            color: "text-orange-600",
          },
        ].map((stat, index) => (
          <Card
            key={stat.label}
            className="text-center bg-white/95 dark:bg-slate-800/95 backdrop-blur-sm border-2 border-slate-200 dark:border-slate-700 hover:shadow-lg transition-all duration-300"
          >
            <CardContent className="p-6">
              <div className={`${stat.color} mb-2`}>
                <stat.icon className="h-8 w-8 mx-auto" />
              </div>
              <div className="text-2xl font-bold text-slate-800 dark:text-slate-100 mb-1">
                {stat.value}
              </div>
              <div className="text-sm text-slate-600 dark:text-slate-300">
                {stat.label}
              </div>
            </CardContent>
          </Card>
        ))}
      </motion.div>
    </div>
  );
}
